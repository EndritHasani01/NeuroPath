version: "3.9"

services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-adaptive_learning_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-adaptive_learning_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  llm:
    build:
      context: ./llm
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      PORT: ${LLM_PORT:-8000}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      GROQ_API_KEY: ${GROQ_API_KEY:-}
    ports:
      - "${LLM_PORT:-8000}:8000"
    healthcheck:
      test:
        - CMD-SHELL
        - python -c "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8000/')"
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      llm:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-adaptive_learning_db}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      PYTHON_SERVICE_BASEURL: ${PYTHON_SERVICE_BASEURL:-http://llm:8000/api/ai}
      FRONTEND_ORIGIN: ${FRONTEND_ORIGIN:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS:-8640000000}
    env_file:
      - .env
    ports:
      - "${APP_PORT:-8080}:8080"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api}
    restart: unless-stopped
    environment:
      BACKEND_BASE_URL: ${BACKEND_BASE_URL:-http://backend:8080}
    depends_on:
      backend:
        condition: service_started
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - app-network

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
